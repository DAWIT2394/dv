// Import dependencies
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcryptjs');

// Create an Express app
const app = express();

// Enable CORS
app.use(cors());

// Connect to MongoDB
const MONGODB_URL = process.env.MONGODB_URL;
mongoose.connect(MONGODB_URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Create a User model
const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
});
const User = mongoose.model('User', UserSchema);

// Create a route to login
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });
  if (!user) {
    return res.status(401).send('Unauthorized');
  }

  const isPasswordCorrect = await bcrypt.compare(password, user.password);
  if (!isPasswordCorrect) {
    return res.status(401).send('Unauthorized');
  }

  const token = await generateToken(user.id);
  res.json({
    token,
  });
});

// Create a route to logout
app.post('/logout', async (req, res) => {
  req.session.destroy();
  res.json({
    message: 'Logged out successfully',
  });
});

// Create a route to register
app.post('/register', async (req, res) => {
  const { name, email, password } = req.body;

  const user = await User.findOne({ email });
  if (user) {
    return res.status(400).send('Email already exists');
  }

  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({
    name,
    email,
    password: hashedPassword,
  });
  await user.save();
  res.json({
    message: 'User created successfully',
  });
});

// Generate a token
const generateToken = (userId) => {
  const token = jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: '1h' });
  return token;
};

// Start the server
app.listen(5000, () => {
  console.log('Server started on port 5000');
});








// Get all tasks
app.get('/tasks', async (req, res) => {
  const tasks = await Task.find({});
  res.send(tasks);
});

// Create a new task
app.post('/tasks', async (req, res) => {
  const { title, description } = req.body;

  const task = new Task({
    title,
    description,
  });
  await task.save();
  res.send(task);
});

// Update a task
app.put('/tasks/:id', async (req, res) => {
  const { id } = req.params;
  const { title, description } = req.body;

  const task = await Task.findById(id);
  if (!task) {
    res.status(404).send('Task not found');
    return;
  }

  task.title = title;
  task.description = description;
  await task.save();
  res.send(task);
});
